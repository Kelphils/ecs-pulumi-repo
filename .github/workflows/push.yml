name: Pulumi-Ecs-Setup
on:
  push:
    branches:
      - main
jobs:
  infrastructure-setup:
    name: Infrastructure-setup
    runs-on: ubuntu-latest
    outputs:
      TASK_DEFINITION_NAME: ${{ steps.task-def.outputs.TASK_DEFINITION_NAME }}
      REPOSITORY_URL: ${{ steps.repo.outputs.REPOSITORY_URL }}
      REGISTRY_NAME: ${{ steps.registry.outputs.REGISTRY_NAME }}
      CONTAINER_NAME: ${{ steps.container.outputs.CONTAINER_NAME }}
      ECS_SERVICE: ${{ steps.service.outputs.ECS_SERVICE }}
      CLUSTER_NAME: ${{ steps.cluster.outputs.CLUSTER_NAME }}
      ECS_SG_ID: ${{ steps.cluster.outputs.ECS_SG_ID }}
      SUBNET_ID: ${{ steps.cluster.outputs.SUBNET_ID }}
      EC2_ROLE: ${{ steps.cluster.outputs.EC2_ROLE }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install Pulumi
        run: |
          curl -fsSL https://get.pulumi.com/ | bash
          export PATH=$PATH:$HOME/.pulumi/bin
      - name: Pulumi Login
        run: pulumi login
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      - name: Configure AWS Credentials
        id:  aws-configure
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - run: |
          echo python3 --version
          pulumi stack select dev
          pip install -r requirements.txt
          pulumi preview
          pulumi up --yes
      - id: task-def
        run:  echo "TASK_DEFINITION_NAME=$(pulumi stack output task_definition_name)" >> "$GITHUB_OUTPUT"
      - id: repo
        run:  echo "REPOSITORY_URL=$(pulumi stack output repository_url)" >> "$GITHUB_OUTPUT"
      - id: registry
        run:  echo "REGISTRY_NAME=$(pulumi stack output registry_name)" >> "$GITHUB_OUTPUT"
      - id: container
        run:  echo "CONTAINER_NAME=$(pulumi stack output container_name)" >> "$GITHUB_OUTPUT"
      - id: service
        run:  echo "ECS_SERVICE=$(pulumi stack output service_name)" >> "$GITHUB_OUTPUT"
      - id: cluster
        run:  echo "CLUSTER_NAME=$(pulumi stack output cluster_name)" >> "$GITHUB_OUTPUT"
      - id: security-group
        run:  echo "ECS_SG_ID=$(pulumi stack output ecs_security_group_id)" >> "$GITHUB_OUTPUT"
      - id: subnet-id
        run:  echo "SUBNET_ID=$(pulumi stack output second_private_subnet)" >> "$GITHUB_OUTPUT"
      - id: ec2-role
        run:  echo "EC2_ROLE=$(pulumi stack output github_runner_role)" >> "$GITHUB_OUTPUT"


  
  start-runner:
    name: Start self-hosted EC2 runner
    needs: infrastructure-setup
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Start EC2 runner
        id: start-ec2-runner
        env:
          SUBNET_ID: ${{ needs.infrastructure-setup.outputs.SUBNET_ID }}
          ECS_SG_ID: ${{ needs.infrastructure-setup.outputs.ECS_SG_ID }}
          EC2_ROLE: ${{ needs.infrastructure-setup.outputs.EC2_ROLE }}
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          ec2-image-id: ami-00182ebbc90674cc6
          ec2-instance-type: t3.medium
          subnet-id: $SUBNET_ID
          security-group-id: ECS_SG_ID
          iam-role-name: $EC2_ROLE # optional, requires additional permissions
          aws-resource-tags: > # optional, requires additional permissions
            [
              {"Key": "Name", "Value": "ec2-github-runner"},
              {"Key": "GitHubRepository", "Value": "${{ github.repository }}"}
            ]

  docker-build-push-deploy:
    name: docker-build-push-deploy
    needs: 
      - infrastructure-setup
      - start-runner # required to start the main job when the runner is ready
    runs-on: ${{ needs.start-runner.outputs.label }} # run the job on the newly created runner
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      #----------------------------------------------
      # -----  Login to AWS ECR  -----
      #----------------------------------------------
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1


      - name: Build and push the tagged docker image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ needs.infrastructure-setup.outputs.REGISTRY_NAME }}
          IMAGE_TAG: ${{ github.sha }}
          LATEST: latest
        run: |
          echo $IMAGE_TAG
          echo $ECR_REPOSITORY
          echo $ECR_REGISTRY
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$LATEST ./welcome-app
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$LATEST
          echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$LATEST" >> "$GITHUB_OUTPUT"

  stop-runner:
    name: Stop self-hosted EC2 runner
    needs:
      - start-runner # required to get output from the start-runner job
      - docker-build-push-deploy # required to wait when the main job is done
    runs-on: ubuntu-latest
    if: ${{ always() }} # required to stop the runner even if the error happened in the previous jobs
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}

    #----------------------------------------------
    # -----  Download task definition  -----
    #----------------------------------------------
      
    #   - name: Download task definition
    #     env:
    #       TASK_DEFINITION_NAME: ${{ needs.infrastructure-setup.outputs.TASK_DEFINITION_NAME }}
    #       ECS_SERVICE: ${{ needs.infrastructure-setup.outputs.ECS_SERVICE }}
    #     run: |
    #       echo $TASK_DEFINITION_NAME
    #       echo $ECS_SERVICE
    #       aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION_NAME }} --query taskDefinition > ${{ env.ECS_SERVICE }}-task-definition.json
    #     shell: bash
    # #----------------------------------------------
    # # -----  Render Amazon ECS task definition  -----
    # #----------------------------------------------

    #   - name: Fill in the new image ID in the Amazon ECS task definition
    #     env:
    #       TASK_DEFINITION_NAME: ${{ needs.infrastructure-setup.outputs.TASK_DEFINITION_NAME }}
    #       CONTAINER_NAME: ${{ needs.infrastructure-setup.outputs.CONTAINER_NAME }}
    #       ECS_SERVICE: ${{ needs.infrastructure-setup.outputs.ECS_SERVICE }}
    #     id: task-defin
    #     uses: aws-actions/amazon-ecs-render-task-definition@v1
    #     with:
    #       task-definition: ${{ env.ECS_SERVICE }}-task-definition.json
    #       container-name: ${{ env.CONTAINER_NAME }}
    #       image: ${{ steps.build-image.outputs.image }}
    

    #   - name: Deploy Amazon ECS task definition
    #     env:
    #       ECS_SERVICE: ${{ needs.infrastructure-setup.outputs.ECS_SERVICE }}
    #       CLUSTER_NAME: ${{ needs.infrastructure-setup.outputs.CLUSTER_NAME }}
    #     uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #     with:
    #       task-definition: ${{ steps.task-defin.outputs.task-definition }}
    #       service: ${{ env.ECS_SERVICE }}
    #       cluster: ${{ env.CLUSTER_NAME }}
    #       wait-for-service-stability: true
